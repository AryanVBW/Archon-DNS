<%- contentFor('title') %>
Domain Blocking - Archon DNS

<%- contentFor('body') %>
<div class="container-fluid">
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Domain Blocking Rules</h5>
          <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRuleModal">
            <i class="bi bi-plus-circle me-1"></i> Add Rule
          </button>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-striped table-hover" id="blockRulesTable">
              <thead>
                <tr>
                  <th>Domain/Pattern</th>
                  <th>Type</th>
                  <th>Category</th>
                  <th>Redirect</th>
                  <th>Status</th>
                  <th>Created</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <!-- Rules will be loaded here via JavaScript -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Rule Modal -->
<div class="modal fade" id="addRuleModal" tabindex="-1" aria-labelledby="addRuleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addRuleModalLabel">Add Blocking Rule</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addRuleForm">
          <div class="mb-3">
            <label for="domain" class="form-label">Domain/Pattern</label>
            <input type="text" class="form-control" id="domain" name="domain" required>
            <div class="form-text" id="domainHelp">Enter a domain name (e.g., example.com) or pattern</div>
          </div>
          
          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="isRegex" name="isRegex">
            <label class="form-check-label" for="isRegex">Use Regular Expression</label>
            <div class="form-text">Enable to use regex patterns instead of exact domain matching</div>
          </div>
          
          <div class="mb-3">
            <label for="category" class="form-label">Category</label>
            <select class="form-select" id="category" name="category" required>
              <option value="ads">Advertisements</option>
              <option value="malware">Malware/Phishing</option>
              <option value="adult">Adult Content</option>
              <option value="social">Social Media</option>
              <option value="custom">Custom</option>
              <option value="other">Other</option>
            </select>
          </div>
          
          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" name="description" rows="2"></textarea>
          </div>
          
          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="useRedirect" name="useRedirect">
            <label class="form-check-label" for="useRedirect">Redirect Instead of Blocking</label>
          </div>
          
          <div class="mb-3" id="redirectToGroup" style="display: none;">
            <label for="redirectTo" class="form-label">Redirect To (IP Address)</label>
            <input type="text" class="form-control" id="redirectTo" name="redirectTo" placeholder="e.g., 192.168.1.1">
          </div>
          
          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="isActive" name="isActive" checked>
            <label class="form-check-label" for="isActive">Active</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveRuleBtn">Save Rule</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Rule Modal -->
<div class="modal fade" id="editRuleModal" tabindex="-1" aria-labelledby="editRuleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editRuleModalLabel">Edit Blocking Rule</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editRuleForm">
          <input type="hidden" id="editRuleId">
          
          <div class="mb-3">
            <label for="editDomain" class="form-label">Domain/Pattern</label>
            <input type="text" class="form-control" id="editDomain" name="domain" required>
          </div>
          
          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="editIsRegex" name="isRegex">
            <label class="form-check-label" for="editIsRegex">Use Regular Expression</label>
          </div>
          
          <div class="mb-3">
            <label for="editCategory" class="form-label">Category</label>
            <select class="form-select" id="editCategory" name="category" required>
              <option value="ads">Advertisements</option>
              <option value="malware">Malware/Phishing</option>
              <option value="adult">Adult Content</option>
              <option value="social">Social Media</option>
              <option value="custom">Custom</option>
              <option value="other">Other</option>
            </select>
          </div>
          
          <div class="mb-3">
            <label for="editDescription" class="form-label">Description</label>
            <textarea class="form-control" id="editDescription" name="description" rows="2"></textarea>
          </div>
          
          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="editUseRedirect" name="useRedirect">
            <label class="form-check-label" for="editUseRedirect">Redirect Instead of Blocking</label>
          </div>
          
          <div class="mb-3" id="editRedirectToGroup">
            <label for="editRedirectTo" class="form-label">Redirect To (IP Address)</label>
            <input type="text" class="form-control" id="editRedirectTo" name="redirectTo" placeholder="e.g., 192.168.1.1">
          </div>
          
          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="editIsActive" name="isActive">
            <label class="form-check-label" for="editIsActive">Active</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="updateRuleBtn">Update Rule</button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteRuleModal" tabindex="-1" aria-labelledby="deleteRuleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteRuleModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this blocking rule? This action cannot be undone.</p>
        <p><strong>Domain/Pattern:</strong> <span id="deleteDomain"></span></p>
        <input type="hidden" id="deleteRuleId">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete Rule</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Load blocking rules when the page loads
    loadBlockRules();
    
    // Toggle redirect input visibility
    document.getElementById('useRedirect').addEventListener('change', function() {
      document.getElementById('redirectToGroup').style.display = this.checked ? 'block' : 'none';
    });
    
    document.getElementById('editUseRedirect').addEventListener('change', function() {
      document.getElementById('editRedirectToGroup').style.display = this.checked ? 'block' : 'none';
    });
    
    // Save rule button click handler
    document.getElementById('saveRuleBtn').addEventListener('click', saveRule);
    
    // Update rule button click handler
    document.getElementById('updateRuleBtn').addEventListener('click', updateRule);
    
    // Confirm delete button click handler
    document.getElementById('confirmDeleteBtn').addEventListener('click', deleteRule);
  });
  
  // Load blocking rules from API
  async function loadBlockRules() {
    try {
      const response = await fetch('/api/block-rules');
      const data = await response.json();
      
      if (data.success) {
        const tableBody = document.querySelector('#blockRulesTable tbody');
        tableBody.innerHTML = '';
        
        if (data.data.length === 0) {
          tableBody.innerHTML = '<tr><td colspan="7" class="text-center">No blocking rules found</td></tr>';
          return;
        }
        
        data.data.forEach(rule => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${rule.domain}</td>
            <td>${rule.isRegex ? '<span class="badge bg-info">Regex</span>' : '<span class="badge bg-secondary">Exact</span>'}</td>
            <td><span class="badge bg-primary">${rule.category}</span></td>
            <td>${rule.redirectTo ? rule.redirectTo : 'None'}</td>
            <td>${rule.isActive ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-danger">Inactive</span>'}</td>
            <td>${new Date(rule.createdAt).toLocaleString()}</td>
            <td>
              <button class="btn btn-sm btn-outline-primary edit-rule" data-id="${rule._id}">
                <i class="bi bi-pencil"></i>
              </button>
              <button class="btn btn-sm btn-outline-danger delete-rule" data-id="${rule._id}">
                <i class="bi bi-trash"></i>
              </button>
            </td>
          `;
          tableBody.appendChild(row);
        });
        
        // Add event listeners to edit and delete buttons
        document.querySelectorAll('.edit-rule').forEach(btn => {
          btn.addEventListener('click', () => openEditModal(btn.dataset.id));
        });
        
        document.querySelectorAll('.delete-rule').forEach(btn => {
          btn.addEventListener('click', () => openDeleteModal(btn.dataset.id));
        });
      } else {
        showAlert('danger', 'Failed to load blocking rules: ' + data.error);
      }
    } catch (error) {
      showAlert('danger', 'Error loading blocking rules: ' + error.message);
    }
  }
  
  // Save new blocking rule
  async function saveRule() {
    const form = document.getElementById('addRuleForm');
    
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }
    
    const domain = document.getElementById('domain').value;
    const isRegex = document.getElementById('isRegex').checked;
    const category = document.getElementById('category').value;
    const description = document.getElementById('description').value;
    const useRedirect = document.getElementById('useRedirect').checked;
    const redirectTo = useRedirect ? document.getElementById('redirectTo').value : null;
    const isActive = document.getElementById('isActive').checked;
    
    try {
      const response = await fetch('/api/block-rules', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          domain, 
          isRegex, 
          category, 
          description, 
          redirectTo, 
          isActive 
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        showAlert('success', 'Blocking rule created successfully');
        $('#addRuleModal').modal('hide');
        form.reset();
        document.getElementById('redirectToGroup').style.display = 'none';
        loadBlockRules();
      } else {
        showAlert('danger', 'Failed to create blocking rule: ' + data.error);
      }
    } catch (error) {
      showAlert('danger', 'Error creating blocking rule: ' + error.message);
    }
  }
  
  // Open edit modal with rule data
  async function openEditModal(ruleId) {
    try {
      const response = await fetch(`/api/block-rules/${ruleId}`);
      const data = await response.json();
      
      if (data.success) {
        const rule = data.data;
        
        document.getElementById('editRuleId').value = rule._id;
        document.getElementById('editDomain').value = rule.domain;
        document.getElementById('editIsRegex').checked = rule.isRegex;
        document.getElementById('editCategory').value = rule.category;
        document.getElementById('editDescription').value = rule.description || '';
        
        const hasRedirect = !!rule.redirectTo;
        document.getElementById('editUseRedirect').checked = hasRedirect;
        document.getElementById('editRedirectTo').value = rule.redirectTo || '';
        document.getElementById('editRedirectToGroup').style.display = hasRedirect ? 'block' : 'none';
        
        document.getElementById('editIsActive').checked = rule.isActive;
        
        $('#editRuleModal').modal('show');
      } else {
        showAlert('danger', 'Failed to load rule details: ' + data.error);
      }
    } catch (error) {
      showAlert('danger', 'Error loading rule details: ' + error.message);
    }
  }
  
  // Update blocking rule
  async function updateRule() {
    const form = document.getElementById('editRuleForm');
    
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }
    
    const ruleId = document.getElementById('editRuleId').value;
    const domain = document.getElementById('editDomain').value;
    const isRegex = document.getElementById('editIsRegex').checked;
    const category = document.getElementById('editCategory').value;
    const description = document.getElementById('editDescription').value;
    const useRedirect = document.getElementById('editUseRedirect').checked;
    const redirectTo = useRedirect ? document.getElementById('editRedirectTo').value : null;
    const isActive = document.getElementById('editIsActive').checked;
    
    try {
      const response = await fetch(`/api/block-rules/${ruleId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          domain, 
          isRegex, 
          category, 
          description, 
          redirectTo, 
          isActive 
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        showAlert('success', 'Blocking rule updated successfully');
        $('#editRuleModal').modal('hide');
        loadBlockRules();
      } else {
        showAlert('danger', 'Failed to update blocking rule: ' + data.error);
      }
    } catch (error) {
      showAlert('danger', 'Error updating blocking rule: ' + error.message);
    }
  }
  
  // Open delete confirmation modal
  async function openDeleteModal(ruleId) {
    try {
      const response = await fetch(`/api/block-rules/${ruleId}`);
      const data = await response.json();
      
      if (data.success) {
        const rule = data.data;
        
        document.getElementById('deleteRuleId').value = rule._id;
        document.getElementById('deleteDomain').textContent = rule.domain;
        
        $('#deleteRuleModal').modal('show');
      } else {
        showAlert('danger', 'Failed to load rule details: ' + data.error);
      }
    } catch (error) {
      showAlert('danger', 'Error loading rule details: ' + error.message);
    }
  }
  
  // Delete blocking rule
  async function deleteRule() {
    const ruleId = document.getElementById('deleteRuleId').value;
    
    try {
      const response = await fetch(`/api/block-rules/${ruleId}`, {
        method: 'DELETE'
      });
      
      const data = await response.json();
      
      if (data.success) {
        showAlert('success', 'Blocking rule deleted successfully');
        $('#deleteRuleModal').modal('hide');
        loadBlockRules();
      } else {
        showAlert('danger', 'Failed to delete blocking rule: ' + data.error);
      }
    } catch (error) {
      showAlert('danger', 'Error deleting blocking rule: ' + error.message);
    }
  }
  
  // Show alert message
  function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.role = 'alert';
    alertDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    document.querySelector('.card-header').after(alertDiv);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
      alertDiv.classList.remove('show');
      setTimeout(() => alertDiv.remove(), 150);
    }, 5000);
  }
</script>
